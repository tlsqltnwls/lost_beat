local IDLE = hash("idle")
local WALK = hash("walk")
local rendercam = require "rendercam.rendercam"

function play_animation(self)
	if self.now_animation == IDLE and vmath.length(self.vel) > 10 then
		msg.post("#player_sprite", "play_animation", {id = WALK})
		self.now_animation = WALK
	elseif self.now_animation == WALK and vmath.length(self.vel) <= 10 then
		msg.post("#player_sprite", "play_animation", {id = IDLE})
		self.now_animation = IDLE
	end
end

function move(self, action_id, action) -- 움직임, 몸 방향
	local mouse_position = rendercam.screen_to_world_2d(action.screen_x,action.screen_y)

	-- 움직임
	if action_id == hash("up") then
		self.vel.y = self.speed
	elseif action_id == hash("down") then
		self.vel.y = -self.speed
	elseif action_id == hash("left") then
		self.vel.x = -self.speed
	elseif action_id == hash("right") then
		self.vel.x = self.speed
	end

	-- 몸 방향
	if not action_id then
		if mouse_position.x - go.get_position().x > 0 then
			sprite.set_hflip("#player_sprite", false)
		else
			sprite.set_hflip("#player_sprite", true)
		end
	end
end

function init(self)
	msg.post(".", "acquire_input_focus") -- input 수신 메시지
	self.vel = vmath.vector3()
	self.speed = 100 -- 속력값
	self.friction = 0.1  -- 마찰력
	self.now_animation = IDLE -- 현재 상태
end

function update(self, dt)
	local pos = go.get_position() + self.vel * dt
	go.set_position(pos)
	self.vel = self.vel - self.vel * self.friction
	play_animation(self)
end

function on_input(self, action_id, action)
	move(self, action_id, action)	
end